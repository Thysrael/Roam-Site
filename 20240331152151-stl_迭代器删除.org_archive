#    -*- mode: org -*-


Archived entries from file /home/thysrael/blog/source/roam/20240331152151-stl_迭代器删除.org


* 遍历容器
:PROPERTIES:
:ARCHIVE_TIME: 2024-03-31 日 17:01
:ARCHIVE_FILE: ~/blog/source/roam/20240331152151-stl_迭代器删除.org
:ARCHIVE_CATEGORY: 20240331152151-stl_迭代器删除
:END:
在遍历容器的过程中删除其中的元素，是一个常见的操作，但是却经常容易引发问题。这是因为删除元素的时候可能会更改元素间的联系，进而影响迭代器的迭代功能。

在 C++ 中，我们使用容器的 ~erase~ 方法，通过传入指向迭代器来删除元素（之所以强调这个，是因为 ~erase~ 还有根据值删除和根据范围删除），上述问题确实存在，但幸好 ~erase~ 方法会返回下一个迭代器。所以通用方法如下：

#+begin_src C++
  #include <iostream>
  #include <list>
  #include <vector>
  #include <set>

  template <typename Container>
  void removeElements(Container& container, const typename Container::value_type& value)
  {
      typename Container::iterator it = container.begin();
      while (it != container.end())
      {
          if (*it == value)
          {
              it = container.erase(it);
          }
          else
          {
              ++it;
          }
      }
  }

  template <typename Container>
  void printContainer(const Container& container)
  {
  	std::cout << "{ ";
      for (const auto& elem : container)
      {
          std::cout << elem << " ";
      }
      std::cout << "}" << std::endl;
  }

  int main()
  {
      std::list<int> valList = { 1, 2, 3, 4, 5, 6 };
      removeElements(valList, 3);
      printContainer(valList);

  	std::set<int> valSet = { 1, 2, 3, 4, 5, 6 };
  	removeElements(valSet, 3);
      printContainer(valSet);

  	std::vector<int> valVector = { 1, 2, 3, 4, 5, 6 };
  	removeElements(valVector, 3);
      printContainer(valVector);

  	
      return 0;
  }
#+end_src

#+RESULTS:
: { 1 2 4 5 6 }
: { 1 2 4 5 6 }
: { 1 2 4 5 6 }
