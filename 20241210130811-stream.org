:PROPERTIES:
:ID:       4bfb9a8d-bc56-47ff-b3bc-31600476a00a
:END:
#+title: Stream

Stream 是流处理的意思，我一直觉得这是一个非常显然的事情。数据流不就是像流水线一样吗，一道工序一道工序的配合，然后完成工作。常规的数据处理，也是得一点点干呀。比如说对数组 ~a[N]~ 中的每个元素求平方和，如果用常规数据处理来写：

#+begin_src cpp
int sum = 0;
for (int i = 0; i < N; i++) {
	tmp = a[i] * a[i];
	sum += tmp;
}
#+end_src

如果用数据流来写：

#+begin_src cpp
int sum = a.power(2).sum()
#+end_src

这种方式似乎和上面没啥区别。当然这种观念是错误的。流处理的优势在于 *隐藏了不必要的中间变量* ，从而使得计算过程更加本质。

还是以上述方法为例，在逻辑上这两个计算过程并没有任何区别，都是将数组中的元素先平方，然后累加。但是在实现上，常规的数据处理“写死了”很多东西，如果以更加硬件的视角来看，它其实是：

#+begin_src asm
    load r1, a[i]
    load r2, a[i]
    mul r3, r1, r2
    add r4, r4, r3
#+end_src

其中 ~r1, r2, r3~ 都是中间的中间变量，而难道计算一定需要这种形式吗？有没有可能采用别的中间变量，或者完全不采用“显式”的临时变量。比如说硬件中的脉动阵列，就是一种没有显式中间变量的设计。

而数据流的写法就不会有这些问题，没有显式的中间变量。
